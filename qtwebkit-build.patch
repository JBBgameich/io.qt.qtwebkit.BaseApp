diff --git a/Source/JavaScriptCore/Scripts/generate-js-builtins.py b/Source/JavaScriptCore/Scripts/generate-js-builtins.py
index 7a203ff0874..66b89632624 100644
--- a/Source/JavaScriptCore/Scripts/generate-js-builtins.py
+++ b/Source/JavaScriptCore/Scripts/generate-js-builtins.py
@@ -124,7 +124,7 @@ if __name__ == '__main__':
     cli_parser.add_option("-t", "--test", action="store_true", help="Enable test mode.")
 
     arg_options, arg_values = cli_parser.parse_args()
-    if len(arg_values) is 0 and not arg_options.input_directory:
+    if len(arg_values) == 0 and not arg_options.input_directory:
         raise ParseException("At least one input file or directory expected.")
 
     if not arg_options.output_directory:
diff --git a/Source/JavaScriptCore/generate-bytecode-files b/Source/JavaScriptCore/generate-bytecode-files
index c5dab429c7b..af3431275ec 100644
--- a/Source/JavaScriptCore/generate-bytecode-files
+++ b/Source/JavaScriptCore/generate-bytecode-files
@@ -163,7 +163,7 @@ if __name__ == "__main__":
         initBytecodesFile = openOrExit(initASMFileName, "w")
 
     try:
-        bytecodeSections = json.load(bytecodeFile, encoding = "utf-8")
+        bytecodeSections = json.load(bytecodeFile)
     except:
         print("Unexpected error parsing {0}: {1}".format(bytecodeJSONFile, sys.exc_info()))
 
diff --git a/Source/JavaScriptCore/inspector/scripts/codegen/cpp_generator.py b/Source/JavaScriptCore/inspector/scripts/codegen/cpp_generator.py
index 4449bade45d..224f6d744ce 100644
--- a/Source/JavaScriptCore/inspector/scripts/codegen/cpp_generator.py
+++ b/Source/JavaScriptCore/inspector/scripts/codegen/cpp_generator.py
@@ -60,11 +60,11 @@ class CppGenerator:
         if isinstance(_type, ArrayType):
             return 'getArray'
         if isinstance(_type, PrimitiveType):
-            if _type.raw_name() is 'integer':
+            if _type.raw_name() == 'integer':
                 return 'getInteger'
-            elif _type.raw_name() is 'number':
+            elif _type.raw_name() == 'number':
                 return 'getDouble'
-            elif _type.raw_name() is 'any':
+            elif _type.raw_name() == 'any':
                 return 'getValue'
             else:
                 return 'get' + ucfirst(_type.raw_name())
@@ -80,11 +80,11 @@ class CppGenerator:
         if isinstance(_type, ArrayType):
             return 'setArray'
         if isinstance(_type, PrimitiveType):
-            if _type.raw_name() is 'integer':
+            if _type.raw_name() == 'integer':
                 return 'setInteger'
-            elif _type.raw_name() is 'number':
+            elif _type.raw_name() == 'number':
                 return 'setDouble'
-            elif _type.raw_name() is 'any':
+            elif _type.raw_name() == 'any':
                 return 'setValue'
             else:
                 return 'set' + ucfirst(_type.raw_name())
@@ -99,7 +99,7 @@ class CppGenerator:
         if isinstance(_type, ObjectType) and len(_type.members) == 0:
             return 'Inspector::InspectorObject'
         if isinstance(_type, ArrayType):
-            if _type.raw_name() is None:  # Otherwise, fall through and use typedef'd name.
+            if _type.raw_name() == None:  # Otherwise, fall through and use typedef'd name.
                 return 'Inspector::Protocol::Array<%s>' % CppGenerator.cpp_protocol_type_for_type(_type.element_type)
         if isinstance(_type, (ObjectType, AliasedType, EnumType, ArrayType)):
             return 'Inspector::Protocol::%s::%s' % (_type.type_domain().domain_name, _type.raw_name())
@@ -123,7 +123,7 @@ class CppGenerator:
             _type = _type.primitive_type  # Fall through to primitive.
 
         # This handles the 'any' type and objects with defined properties.
-        if isinstance(_type, ObjectType) or _type.qualified_name() is 'object':
+        if isinstance(_type, ObjectType) or _type.qualified_name() == 'object':
             cpp_name = 'Inspector::InspectorObject'
             if parameter.is_optional:
                 return 'const %s*' % cpp_name
diff --git a/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_protocol_types_header.py b/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_protocol_types_header.py
index 2dbda8bca92..7819fff66e4 100755
--- a/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_protocol_types_header.py
+++ b/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_protocol_types_header.py
@@ -245,7 +245,7 @@ class CppProtocolTypesHeaderGenerator(Generator):
 
     def _generate_struct_for_anonymous_enum_member(self, enum_member):
         def apply_indentation(line):
-            if line.startswith(('#', '/*', '*/', '//')) or len(line) is 0:
+            if line.startswith(('#', '/*', '*/', '//')) or len(line) == 0:
                 return line
             else:
                 return '    ' + line
diff --git a/Source/JavaScriptCore/inspector/scripts/codegen/objc_generator.py b/Source/JavaScriptCore/inspector/scripts/codegen/objc_generator.py
index 35b2c593ab1..46ab3969f30 100755
--- a/Source/JavaScriptCore/inspector/scripts/codegen/objc_generator.py
+++ b/Source/JavaScriptCore/inspector/scripts/codegen/objc_generator.py
@@ -66,11 +66,11 @@ class ObjCTypeCategory:
     @staticmethod
     def category_for_type(_type):
         if (isinstance(_type, PrimitiveType)):
-            if _type.raw_name() is 'string':
+            if _type.raw_name() == 'string':
                 return ObjCTypeCategory.String
             if  _type.raw_name() in ['object', 'any']:
                 return ObjCTypeCategory.Object
-            if _type.raw_name() is 'array':
+            if _type.raw_name() == 'array':
                 return ObjCTypeCategory.Array
             return ObjCTypeCategory.Simple
         if (isinstance(_type, ObjectType)):
@@ -196,15 +196,15 @@ class ObjCGenerator:
 
     @staticmethod
     def objc_type_for_raw_name(raw_name):
-        if raw_name is 'string':
+        if raw_name == 'string':
             return 'NSString *'
-        if raw_name is 'array':
+        if raw_name == 'array':
             return 'NSArray *'
-        if raw_name is 'integer':
+        if raw_name == 'integer':
             return 'int'
-        if raw_name is 'number':
+        if raw_name == 'number':
             return 'double'
-        if raw_name is 'boolean':
+        if raw_name == 'boolean':
             return 'BOOL'
         if raw_name in ['any', 'object']:
             return '%s *' % ObjCGenerator.OBJC_JSON_OBJECT_BASE
@@ -212,9 +212,9 @@ class ObjCGenerator:
 
     @staticmethod
     def objc_class_for_raw_name(raw_name):
-        if raw_name is 'string':
+        if raw_name == 'string':
             return 'NSString'
-        if raw_name is 'array':
+        if raw_name == 'array':
             return 'NSArray'
         if raw_name in ['integer', 'number', 'boolean']:
             return 'NSNumber'
@@ -226,13 +226,13 @@ class ObjCGenerator:
 
     @staticmethod
     def protocol_type_for_raw_name(raw_name):
-        if raw_name is 'string':
+        if raw_name == 'string':
             return 'String'
-        if raw_name is 'integer':
+        if raw_name == 'integer':
             return 'int'
-        if raw_name is 'number':
+        if raw_name == 'number':
             return 'double'
-        if raw_name is 'boolean':
+        if raw_name == 'boolean':
             return 'bool'
         if raw_name in ['any', 'object']:
             return 'InspectorObject'
@@ -367,18 +367,18 @@ class ObjCGenerator:
             if isinstance(var_type, EnumType):
                 return 'toProtocolString(%s)' % var_name
             return var_name
-        if category is ObjCTypeCategory.Object:
+        if category == ObjCTypeCategory.Object:
             return '[%s toInspectorObject]' % var_name
-        if category is ObjCTypeCategory.Array:
+        if category == ObjCTypeCategory.Array:
             protocol_type = ObjCGenerator.protocol_type_for_type(var_type.element_type)
             objc_class = ObjCGenerator.objc_class_for_type(var_type.element_type)
             if protocol_type == 'Inspector::Protocol::Array<String>':
                 return 'inspectorStringArrayArray(%s)' % var_name
-            if protocol_type is 'String' and objc_class is 'NSString':
+            if protocol_type == 'String' and objc_class == 'NSString':
                 return 'inspectorStringArray(%s)' % var_name
-            if protocol_type is 'int' and objc_class is 'NSNumber':
+            if protocol_type == 'int' and objc_class == 'NSNumber':
                 return 'inspectorIntegerArray(%s)' % var_name
-            if protocol_type is 'double' and objc_class is 'NSNumber':
+            if protocol_type == 'double' and objc_class == 'NSNumber':
                 return 'inspectorDoubleArray(%s)' % var_name
             return 'inspectorObjectArray(%s)' % var_name
 
@@ -403,14 +403,14 @@ class ObjCGenerator:
         category = ObjCTypeCategory.category_for_type(var_type)
         if category in [ObjCTypeCategory.Simple, ObjCTypeCategory.String]:
             return var_name
-        if category is ObjCTypeCategory.Object:
+        if category == ObjCTypeCategory.Object:
             objc_class = ObjCGenerator.objc_class_for_type(var_type)
             return '[[[%s alloc] initWithInspectorObject:%s] autorelease]' % (objc_class, var_name)
-        if category is ObjCTypeCategory.Array:
+        if category == ObjCTypeCategory.Array:
             objc_class = ObjCGenerator.objc_class_for_type(var_type.element_type)
-            if objc_class is 'NSString':
+            if objc_class == 'NSString':
                 return 'objcStringArray(%s)' % var_name
-            if objc_class is 'NSNumber':  # FIXME: Integer or Double?
+            if objc_class == 'NSNumber':  # FIXME: Integer or Double?
                 return 'objcIntegerArray(%s)' % var_name
             return 'objcArray<%s>(%s)' % (objc_class, var_name)
 
@@ -425,15 +425,15 @@ class ObjCGenerator:
             if isinstance(member.type, EnumType):
                 return 'toProtocolString(%s)' % sub_expression
             return sub_expression
-        if category is ObjCTypeCategory.Object:
+        if category == ObjCTypeCategory.Object:
             return sub_expression
-        if category is ObjCTypeCategory.Array:
+        if category == ObjCTypeCategory.Array:
             objc_class = ObjCGenerator.objc_class_for_type(member.type.element_type)
-            if objc_class is 'NSString':
+            if objc_class == 'NSString':
                 return 'inspectorStringArray(%s)' % sub_expression
-            if objc_class is 'NSNumber':
+            if objc_class == 'NSNumber':
                 protocol_type = ObjCGenerator.protocol_type_for_type(member.type.element_type)
-                if protocol_type is 'double':
+                if protocol_type == 'double':
                     return 'inspectorDoubleArray(%s)' % sub_expression
                 return 'inspectorIntegerArray(%s)' % sub_expression
             return 'inspectorObjectArray(%s)' % sub_expression
@@ -447,17 +447,17 @@ class ObjCGenerator:
                     return 'fromProtocolString<%s>(%s)' % (ObjCGenerator.objc_enum_name_for_anonymous_enum_member(declaration, member), sub_expression)
                 return 'fromProtocolString<%s>(%s)' % (ObjCGenerator.objc_enum_name_for_non_anonymous_enum(member.type), sub_expression)
             return sub_expression
-        if category is ObjCTypeCategory.Object:
+        if category == ObjCTypeCategory.Object:
             objc_type = ObjCGenerator.objc_type_for_member(declaration, member)
             return '(%s)%s' % (objc_type, sub_expression)
-        if category is ObjCTypeCategory.Array:
+        if category == ObjCTypeCategory.Array:
             protocol_type = ObjCGenerator.protocol_type_for_type(member.type.element_type)
             objc_class = ObjCGenerator.objc_class_for_type(member.type.element_type)
-            if objc_class is 'NSString':
+            if objc_class == 'NSString':
                 return 'objcStringArray(%s)' % sub_expression
-            if objc_class is 'NSNumber':
+            if objc_class == 'NSNumber':
                 protocol_type = ObjCGenerator.protocol_type_for_type(member.type.element_type)
-                if protocol_type is 'double':
+                if protocol_type == 'double':
                     return 'objcDoubleArray(%s)' % sub_expression
                 return 'objcIntegerArray(%s)' % sub_expression
             return 'objcArray<%s>(%s)' % (objc_class, sub_expression)
@@ -474,17 +474,17 @@ class ObjCGenerator:
             _type = _type.aliased_type
         if (isinstance(_type, PrimitiveType)):
             raw_name = _type.raw_name()
-            if raw_name is 'boolean':
+            if raw_name == 'boolean':
                 return 'setBool'
-            if raw_name is 'integer':
+            if raw_name == 'integer':
                 return 'setInteger'
-            if raw_name is 'number':
+            if raw_name == 'number':
                 return 'setDouble'
-            if raw_name is 'string':
+            if raw_name == 'string':
                 return 'setString'
             if raw_name in ['any', 'object']:
                 return 'setObject'
-            if raw_name is 'array':
+            if raw_name == 'array':
                 return 'setInspectorArray'
             return None
         if (isinstance(_type, EnumType)):
@@ -505,17 +505,17 @@ class ObjCGenerator:
             _type = _type.aliased_type
         if (isinstance(_type, PrimitiveType)):
             raw_name = _type.raw_name()
-            if raw_name is 'boolean':
+            if raw_name == 'boolean':
                 return 'boolForKey'
-            if raw_name is 'integer':
+            if raw_name == 'integer':
                 return 'integerForKey'
-            if raw_name is 'number':
+            if raw_name == 'number':
                 return 'doubleForKey'
-            if raw_name is 'string':
+            if raw_name == 'string':
                 return 'stringForKey'
             if raw_name in ['any', 'object']:
                 return 'objectForKey'
-            if raw_name is 'array':
+            if raw_name == 'array':
                 return 'inspectorArrayForKey'
             return None
         if (isinstance(_type, EnumType)):
diff --git a/Source/WTF/wtf/glib/GRefPtr.h b/Source/WTF/wtf/glib/GRefPtr.h
index d05084b66a1..4aa54953c37 100644
--- a/Source/WTF/wtf/glib/GRefPtr.h
+++ b/Source/WTF/wtf/glib/GRefPtr.h
@@ -29,9 +29,6 @@
 #include <wtf/RefPtr.h>
 #include <algorithm>
 
-extern "C" void g_object_unref(gpointer);
-extern "C" gpointer g_object_ref_sink(gpointer);
-
 namespace WTF {
 
 enum GRefPtrAdoptType { GRefPtrAdopt };
diff --git a/Source/WebCore/css/CSSGrammar.y.in b/Source/WebCore/css/CSSGrammar.y.in
index 0aad4566359..a3033a778ee 100644
--- a/Source/WebCore/css/CSSGrammar.y.in
+++ b/Source/WebCore/css/CSSGrammar.y.in
@@ -21,7 +21,8 @@
  *
  */
 
-%pure-parser
+%define api.pure
+%define api.header.include {"CSSGrammar.h"}
 
 %parse-param { CSSParser* parser }
 %lex-param { CSSParser* parser }
diff --git a/Source/WebCore/platform/text/TextAllInOne.cpp b/Source/WebCore/platform/text/TextAllInOne.cpp
index b03e8accb6a..941ab8c9604 100644
--- a/Source/WebCore/platform/text/TextAllInOne.cpp
+++ b/Source/WebCore/platform/text/TextAllInOne.cpp
@@ -25,6 +25,10 @@
 
 // This all-in-one cpp file cuts down on template bloat to allow us to build our Windows release build.
 
+#include <unicode/umachine.h>
+#define TRUE 1
+#define FALSE 0
+
 #include "TextBoundaries.cpp"
 #include "TextBreakIterator.cpp"
 #include "TextCodec.cpp"
diff --git a/Source/WebCore/xml/XPathGrammar.y b/Source/WebCore/xml/XPathGrammar.y
index 356e11889ed..f098b4dac32 100644
--- a/Source/WebCore/xml/XPathGrammar.y
+++ b/Source/WebCore/xml/XPathGrammar.y
@@ -47,7 +47,8 @@ using namespace XPath;
 
 %}
 
-%pure-parser
+%define api.pure
+%define api.header.include {"XPathGrammar.h"}
 %lex-param { parser }
 %parse-param { Parser& parser }
 
